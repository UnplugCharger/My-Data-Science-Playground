{
  
    
  
    
  
    
  
    
        "post3": {
            "title": "PLANT PATHOLOGY",
            "content": "!pip install fastai2 graphviz ipywidgets matplotlib nbdev&gt;=0.2.12 pandas scikit_learn azure-cognitiveservices-search-imagesearch sentencepiece . pip install fastcore==1.0.0 . Collecting fastcore==1.0.0 Downloading https://files.pythonhosted.org/packages/cc/92/233661d730b5613b4daf473cd28005bf2294fb1a858ce0bac57fbb7fa5ec/fastcore-1.0.0-py3-none-any.whl Requirement already satisfied: wheel in /usr/local/lib/python3.6/dist-packages (from fastcore==1.0.0) (0.35.1) Requirement already satisfied: pip in /usr/local/lib/python3.6/dist-packages (from fastcore==1.0.0) (19.3.1) Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from fastcore==1.0.0) (1.18.5) Requirement already satisfied: packaging in /usr/local/lib/python3.6/dist-packages (from fastcore==1.0.0) (20.4) Requirement already satisfied: dataclasses in /usr/local/lib/python3.6/dist-packages (from fastcore==1.0.0) (0.7) Requirement already satisfied: pyparsing&gt;=2.0.2 in /usr/local/lib/python3.6/dist-packages (from packaging-&gt;fastcore==1.0.0) (2.4.7) Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from packaging-&gt;fastcore==1.0.0) (1.15.0) ERROR: nbdev 1.0.14 has requirement fastcore&gt;=1.0.5, but you&#39;ll have fastcore 1.0.0 which is incompatible. Installing collected packages: fastcore Found existing installation: fastcore 1.0.9 Uninstalling fastcore-1.0.9: Successfully uninstalled fastcore-1.0.9 Successfully installed fastcore-1.0.0 . from fastai2.vision.all import* from sklearn.metrics import roc_auc_score . data_path = Path(&quot;/content/drive/My Drive/Competition Datasets /Plant_Pathology_2020&quot;) . df = pd.read_csv(data_path/&quot;train.csv&quot;) . df.head() . image_id healthy multiple_diseases rust scab . 0 Train_0 | 0 | 0 | 0 | 1 | . 1 Train_1 | 0 | 1 | 0 | 0 | . 2 Train_2 | 1 | 0 | 0 | 0 | . 3 Train_3 | 0 | 0 | 1 | 0 | . 4 Train_4 | 1 | 0 | 0 | 0 | . df.iloc[:, 1:].sum(axis=1).value_counts() . 1 1821 dtype: int64 . imglabels = list(df.columns[1:]) . df[&quot;labels&quot;] = df.apply(lambda x: imglabels[x.values[1:].argmax()], axis=1) . dls = ImageDataLoaders.from_df(df, path=data_path, suff=&quot;.jpg&quot;, folder=&quot;images&quot;, label_col=&quot;labels&quot;, item_tfms=RandomResizedCrop(512, min_scale=0.5), # note that we use a bigger image size batch_tfms=aug_transforms(), valid_pct=0.05, bs=16, val_bs=16 ) . dls.show_batch(max_n=16, nrows=2) . def mean_roc_auc(preds, targets, num_cols=4): &quot;&quot;&quot;The competition metric Quoting: &#39;Submissions are evaluated on mean column-wise ROC AUC. In other words, the score is the average of the individual AUCs of each predicted column. &#39; Unfortunately, we cannot use in validation, as it can happen that all files in a batch has the same label, and ROC is undefined &quot;&quot;&quot; aucs = [] preds = preds.detach().cpu().numpy() targets = targets.detach().cpu().numpy() for i in range(num_cols): # grab a column from the networks output cpreds = preds[:, i] # see which objects have the i-th label ctargets = [x == i for x in targets] aucs.append(roc_auc_score(ctargets, cpreds)) return sum(aucs) / num_cols . learn = cnn_learner(dls, resnet50, metrics=[accuracy], model_dir=&quot;/content/drive/My Drive/Competition Datasets /Plant_Pathology_2020&quot;) . Downloading: &#34;https://download.pytorch.org/models/resnet50-19c8e357.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth . . learn.lr_find() . SuggestedLRs(lr_min=0.012022644281387329, lr_steep=0.0014454397605732083) . learn.fit(4, lr=1e-3) . epoch train_loss valid_loss accuracy time . 0 | 0.707231 | 0.460912 | 0.857143 | 03:02 | . 1 | 0.413365 | 0.325106 | 0.879121 | 01:50 | . 2 | 0.315370 | 0.257212 | 0.923077 | 01:51 | . 3 | 0.317782 | 0.273335 | 0.912088 | 01:51 | . learn.unfreeze() . learn.lr_find() . SuggestedLRs(lr_min=2.290867705596611e-05, lr_steep=6.309573450380412e-07) . learn.save(&quot;model&quot;) . learn.fit_one_cycle(16, lr_max=slice(1e-6,1e-5), cbs=[SaveModelCallback(every=&#39;epoch&#39;, monitor=&quot;accuracy&quot;)]) . epoch train_loss valid_loss accuracy time . 0 | 0.288165 | 0.252785 | 0.901099 | 01:57 | . 1 | 0.246356 | 0.231000 | 0.934066 | 01:58 | . 2 | 0.224936 | 0.230817 | 0.923077 | 01:57 | . 3 | 0.194872 | 0.214574 | 0.934066 | 01:57 | . 4 | 0.184176 | 0.181867 | 0.945055 | 01:57 | . 5 | 0.158892 | 0.180428 | 0.945055 | 01:58 | . 6 | 0.171457 | 0.171559 | 0.956044 | 01:58 | . 7 | 0.147328 | 0.156418 | 0.945055 | 01:59 | . 8 | 0.149036 | 0.152680 | 0.945055 | 01:57 | . 9 | 0.128518 | 0.154319 | 0.956044 | 01:58 | . 10 | 0.139238 | 0.180397 | 0.945055 | 01:58 | . 11 | 0.118221 | 0.157399 | 0.945055 | 01:58 | . 12 | 0.104585 | 0.171786 | 0.945055 | 01:57 | . 13 | 0.166329 | 0.163900 | 0.956044 | 01:58 | . 14 | 0.136599 | 0.165283 | 0.945055 | 01:58 | . 15 | 0.120882 | 0.154736 | 0.956044 | 01:58 | . Better model found at epoch 0 with accuracy value: 0.901098906993866. Better model found at epoch 1 with accuracy value: 0.9340659379959106. Better model found at epoch 4 with accuracy value: 0.9450549483299255. Better model found at epoch 6 with accuracy value: 0.9560439586639404. . learn.load(&quot;model&quot;) . &lt;fastai2.learner.Learner at 0x7f1ab2352860&gt; . learn.load(&quot;model&quot;) . &lt;fastai2.learner.Learner at 0x7f1ab2352860&gt; . test_image_ids = [img.split(&quot;.&quot;)[0] for img in os.listdir(data_path/&quot;images&quot;) if img.startswith(&quot;Test&quot;)] test_images = [data_path/&quot;images&quot;/f&quot;{img}.jpg&quot; for img in test_image_ids] preds = learn.get_preds(dl=dls.test_dl(test_images, shuffle=False, drop_last=False)) . # ensure that the order of columns in preds matches the imglabels preds = preds[0].cpu().numpy() vocab = list(dls[0].dataset.vocab) column_permutation = [vocab.index(l) for l in imglabels] preds = preds[:, column_permutation] submission = pd.DataFrame() submission[&quot;image_id&quot;] = test_image_ids for i in range(len(imglabels)): submission[imglabels[i]] = preds[:, i] submission.to_csv(&quot;submission.csv&quot;, index=False) . submission.head(10) . image_id healthy multiple_diseases rust scab . 0 Test_981 | 7.602632e-04 | 2.068442e-03 | 6.178252e-06 | 9.971651e-01 | . 1 Test_98 | 1.365243e-04 | 3.923656e-03 | 2.894043e-07 | 9.959395e-01 | . 2 Test_986 | 5.981431e-07 | 2.534528e-04 | 2.782608e-09 | 9.997459e-01 | . 3 Test_976 | 1.648496e-05 | 5.323170e-05 | 9.999267e-01 | 3.539740e-06 | . 4 Test_999 | 4.984141e-07 | 9.775054e-07 | 9.999986e-01 | 5.851503e-09 | . 5 Test_996 | 4.980442e-05 | 2.681709e-01 | 7.314788e-01 | 3.003662e-04 | . 6 Test_99 | 2.969532e-02 | 4.484442e-04 | 1.557501e-03 | 9.682987e-01 | . 7 Test_980 | 1.123909e-03 | 1.314125e-02 | 1.206828e-06 | 9.857336e-01 | . 8 Test_997 | 1.704059e-07 | 1.934623e-02 | 9.600331e-01 | 2.062041e-02 | . 9 Test_995 | 2.850686e-03 | 2.235687e-01 | 7.695004e-01 | 4.080193e-03 | . submission.to_csv(&quot;/content/drive/My Drive/Competition Datasets /Plant_Pathology_2020/submission.csv&quot;, index=False) . submission.shape . (1832, 5) .",
            "url": "https://unplugcharger.github.io/My-Data-Science-Playground/2020/09/09/_09_10_Fastai_Kaggle_Image_Classification-(1).html",
            "relUrl": "/2020/09/09/_09_10_Fastai_Kaggle_Image_Classification-(1).html",
            "date": " • Sep 9, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am Mahinya Isaac Byron. . An Electrical and Electronics Engineering graduate from Jommo Kenyatta University of Agriculture and Technology. I am a Data Science enthusiast . In this blog I will showcase all the projects I will work on through my journey from enthusiast to Expert.I am intrested in leveraging technology in the field of Deep Learning, Machine Learning and Artificial intellligence to solve real world problems .",
          "url": "https://unplugcharger.github.io/My-Data-Science-Playground/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://unplugcharger.github.io/My-Data-Science-Playground/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}